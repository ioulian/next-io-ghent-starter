"use strict";(self.webpackChunknext_io_ghent_starter=self.webpackChunknext_io_ghent_starter||[]).push([[2492],{"./src/components/common/slider/Slider.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>Slider_stories});var defineProperty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),swiper_react=__webpack_require__("./node_modules/swiper/swiper-react.mjs"),esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),toConsumableArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),swiper_modules=__webpack_require__("./node_modules/swiper/modules/index.mjs"),_excluded=(__webpack_require__("./node_modules/swiper/swiper.css"),["children","modules"]),__jsx=react.createElement,Slider=function Slider(_ref){var children=_ref.children,modules=_ref.modules,props=(0,objectWithoutProperties.Z)(_ref,_excluded);return __jsx(swiper_react.tq,(0,esm_extends.Z)({},props,{modules:Array.isArray(modules)?[].concat((0,toConsumableArray.Z)(modules),[swiper_modules.s5]):[swiper_modules.s5]}),children)};Slider.displayName="Slider",Slider.__docgenInfo={description:"",methods:[],displayName:"Slider"};const slider_Slider=(0,react.memo)(Slider);try{Slider.displayName="Slider",Slider.__docgenInfo={description:"",displayName:"Slider",props:{tag:{defaultValue:{value:"'div'"},description:"Swiper container tag",name:"tag",required:!1,type:{name:"string"}},wrapperTag:{defaultValue:{value:"'div'"},description:"Swiper wrapper tag",name:"wrapperTag",required:!1,type:{name:"string"}},onSwiper:{defaultValue:null,description:"Get Swiper instance",name:"onSwiper",required:!1,type:{name:"((swiper: Swiper) => void)"}},onAutoplayStart:{defaultValue:null,description:"Event will be fired in when autoplay started",name:"onAutoplayStart",required:!1,type:{name:"((swiper: Swiper) => void)"}},onAutoplayStop:{defaultValue:null,description:"Event will be fired when autoplay stopped",name:"onAutoplayStop",required:!1,type:{name:"((swiper: Swiper) => void)"}},onAutoplayPause:{defaultValue:null,description:"Event will be fired on autoplay pause",name:"onAutoplayPause",required:!1,type:{name:"((swiper: Swiper) => void)"}},onAutoplayResume:{defaultValue:null,description:"Event will be fired on autoplay resume",name:"onAutoplayResume",required:!1,type:{name:"((swiper: Swiper) => void)"}},onAutoplayTimeLeft:{defaultValue:null,description:"Event triggers continuously while autoplay is enabled. It contains time left (in ms) before transition to next slide and percentage of that time related to autoplay delay",name:"onAutoplayTimeLeft",required:!1,type:{name:"((swiper: Swiper, timeLeft: number, percentage: number) => void)"}},onAutoplay:{defaultValue:null,description:"Event will be fired when slide changed with autoplay",name:"onAutoplay",required:!1,type:{name:"((swiper: Swiper) => void)"}},onHashChange:{defaultValue:null,description:"",name:"onHashChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onHashSet:{defaultValue:null,description:"Event will be fired when swiper updates the hash",name:"onHashSet",required:!1,type:{name:"((swiper: Swiper) => void)"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"((swiper: Swiper, keyCode: string) => void)"}},onScroll:{defaultValue:null,description:"",name:"onScroll",required:!1,type:{name:"((swiper: Swiper, event: WheelEvent) => void)"}},onNavigationHide:{defaultValue:null,description:"",name:"onNavigationHide",required:!1,type:{name:"((swiper: Swiper) => void)"}},onNavigationShow:{defaultValue:null,description:"Event will be fired on navigation show",name:"onNavigationShow",required:!1,type:{name:"((swiper: Swiper) => void)"}},onNavigationPrev:{defaultValue:null,description:"Event will be fired on navigation prev button click",name:"onNavigationPrev",required:!1,type:{name:"((swiper: Swiper) => void)"}},onNavigationNext:{defaultValue:null,description:"Event will be fired on navigation next button click",name:"onNavigationNext",required:!1,type:{name:"((swiper: Swiper) => void)"}},onScrollbarDragStart:{defaultValue:null,description:"",name:"onScrollbarDragStart",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onScrollbarDragMove:{defaultValue:null,description:"Event will be fired on draggable scrollbar drag move",name:"onScrollbarDragMove",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onScrollbarDragEnd:{defaultValue:null,description:"Event will be fired on draggable scrollbar drag end",name:"onScrollbarDragEnd",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onZoomChange:{defaultValue:null,description:"",name:"onZoomChange",required:!1,type:{name:"((swiper: Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void)"}},onPaginationRender:{defaultValue:null,description:"",name:"onPaginationRender",required:!1,type:{name:"((swiper: Swiper, paginationEl: HTMLElement) => void)"}},onPaginationUpdate:{defaultValue:null,description:"Event will be fired when pagination updated",name:"onPaginationUpdate",required:!1,type:{name:"((swiper: Swiper, paginationEl: HTMLElement) => void)"}},onPaginationHide:{defaultValue:null,description:"Event will be fired on pagination hide",name:"onPaginationHide",required:!1,type:{name:"((swiper: Swiper) => void)"}},onPaginationShow:{defaultValue:null,description:"Event will be fired on pagination show",name:"onPaginationShow",required:!1,type:{name:"((swiper: Swiper) => void)"}},onInit:{defaultValue:null,description:"Fired right after Swiper initialization.\n@note Note that with `swiper.on('init')` syntax it will\nwork only in case you set `init: false` parameter.\n@example ```js\nconst swiper = new Swiper('.swiper', {\n  init: false,\n  // other parameters\n});\nswiper.on('init', function() {\n // do something\n});\n// init Swiper\nswiper.init();\n```\n@example ```js\n// Otherwise use it as the parameter:\nconst swiper = new Swiper('.swiper', {\n  // other parameters\n  on: {\n    init: function () {\n      // do something\n    },\n  }\n});\n```",name:"onInit",required:!1,type:{name:"((swiper: Swiper) => any)"}},onBeforeDestroy:{defaultValue:null,description:"Event will be fired right before Swiper destroyed",name:"onBeforeDestroy",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlideChange:{defaultValue:null,description:"Event will be fired when currently active slide is changed",name:"onSlideChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlideChangeTransitionStart:{defaultValue:null,description:"Event will be fired in the beginning of animation to other slide (next or previous).",name:"onSlideChangeTransitionStart",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlideChangeTransitionEnd:{defaultValue:null,description:"Event will be fired after animation to other slide (next or previous).",name:"onSlideChangeTransitionEnd",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlideNextTransitionStart:{defaultValue:null,description:'Same as "slideChangeTransitionStart" but for "forward" direction only',name:"onSlideNextTransitionStart",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlideNextTransitionEnd:{defaultValue:null,description:'Same as "slideChangeTransitionEnd" but for "forward" direction only',name:"onSlideNextTransitionEnd",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlidePrevTransitionStart:{defaultValue:null,description:'Same as "slideChangeTransitionStart" but for "backward" direction only',name:"onSlidePrevTransitionStart",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlidePrevTransitionEnd:{defaultValue:null,description:'Same as "slideChangeTransitionEnd" but for "backward" direction only',name:"onSlidePrevTransitionEnd",required:!1,type:{name:"((swiper: Swiper) => void)"}},onTransitionStart:{defaultValue:null,description:"Event will be fired in the beginning of transition.",name:"onTransitionStart",required:!1,type:{name:"((swiper: Swiper) => void)"}},onTransitionEnd:{defaultValue:null,description:"Event will be fired after transition.",name:"onTransitionEnd",required:!1,type:{name:"((swiper: Swiper) => void)"}},onTouchStart:{defaultValue:null,description:"Event will be fired when user touch Swiper. Receives `pointerdown` event as an arguments.",name:"onTouchStart",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onTouchMove:{defaultValue:null,description:"Event will be fired when user touch and move finger over Swiper. Receives `pointermove` event as an arguments.",name:"onTouchMove",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onTouchMoveOpposite:{defaultValue:null,description:"Event will be fired when user touch and move finger over Swiper in direction opposite to direction parameter. Receives `pointermove` event as an arguments.",name:"onTouchMoveOpposite",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onSliderMove:{defaultValue:null,description:"Event will be fired when user touch and move finger over Swiper and move it. Receives `pointermove` event as an arguments.",name:"onSliderMove",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onTouchEnd:{defaultValue:null,description:"Event will be fired when user release Swiper. Receives `pointerup` event as an arguments.",name:"onTouchEnd",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onClick:{defaultValue:null,description:"Event will be fired when user click/tap on Swiper. Receives `pointerup` event as an arguments.",name:"onClick",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onTap:{defaultValue:null,description:"Event will be fired when user click/tap on Swiper. Receives `pointerup` event as an arguments.",name:"onTap",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onDoubleTap:{defaultValue:null,description:"Event will be fired when user double tap on Swiper's container. Receives `pointerup` event as an arguments",name:"onDoubleTap",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onProgress:{defaultValue:null,description:"Event will be fired when Swiper progress is changed, as an arguments it receives progress that is always from 0 to 1",name:"onProgress",required:!1,type:{name:"((swiper: Swiper, progress: number) => void)"}},onReachBeginning:{defaultValue:null,description:"Event will be fired when Swiper reach its beginning (initial position)",name:"onReachBeginning",required:!1,type:{name:"((swiper: Swiper) => void)"}},onReachEnd:{defaultValue:null,description:"Event will be fired when Swiper reach last slide",name:"onReachEnd",required:!1,type:{name:"((swiper: Swiper) => void)"}},onToEdge:{defaultValue:null,description:"Event will be fired when Swiper goes to beginning or end position",name:"onToEdge",required:!1,type:{name:"((swiper: Swiper) => void)"}},onFromEdge:{defaultValue:null,description:"Event will be fired when Swiper goes from beginning or end position",name:"onFromEdge",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSetTranslate:{defaultValue:null,description:"Event will be fired when swiper's wrapper change its position. Receives current translate value as an arguments",name:"onSetTranslate",required:!1,type:{name:"((swiper: Swiper, translate: number) => void)"}},onSetTransition:{defaultValue:null,description:"Event will be fired everytime when swiper starts animation. Receives current transition duration (in ms) as an arguments",name:"onSetTransition",required:!1,type:{name:"((swiper: Swiper, transition: number) => void)"}},onResize:{defaultValue:null,description:"Event will be fired on window resize right before swiper's onresize manipulation",name:"onResize",required:!1,type:{name:"((swiper: Swiper) => void)"}},onObserverUpdate:{defaultValue:null,description:"Event will be fired if observer is enabled and it detects DOM mutations",name:"onObserverUpdate",required:!1,type:{name:"((swiper: Swiper) => void)"}},onBeforeLoopFix:{defaultValue:null,description:'Event will be fired right before "loop fix"',name:"onBeforeLoopFix",required:!1,type:{name:"((swiper: Swiper) => void)"}},onLoopFix:{defaultValue:null,description:'Event will be fired after "loop fix"',name:"onLoopFix",required:!1,type:{name:"((swiper: Swiper) => void)"}},onBreakpoint:{defaultValue:null,description:"Event will be fired on breakpoint change",name:"onBreakpoint",required:!1,type:{name:"((swiper: Swiper, breakpointParams: SwiperOptions) => void)"}},_beforeBreakpoint:{defaultValue:null,description:"!INTERNAL: Event will fired right before breakpoint change",name:"_beforeBreakpoint",required:!1,type:{name:"((swiper: Swiper, breakpointParams: SwiperOptions) => void)"}},_containerClasses:{defaultValue:null,description:"!INTERNAL: Event will fired after setting CSS classes on swiper container element",name:"_containerClasses",required:!1,type:{name:"((swiper: Swiper, classNames: string) => void)"}},_slideClass:{defaultValue:null,description:"!INTERNAL: Event will fired after setting CSS classes on swiper slide element",name:"_slideClass",required:!1,type:{name:"((swiper: Swiper, slideEl: HTMLElement, classNames: string) => void)"}},_slideClasses:{defaultValue:null,description:"!INTERNAL: Event will fired after setting CSS classes on all swiper slides",name:"_slideClasses",required:!1,type:{name:"((swiper: Swiper, slides: { slideEl: HTMLElement; classNames: string; index: number; }[]) => void)"}},_swiper:{defaultValue:null,description:"!INTERNAL: Event will fired as soon as swiper instance available (before init)",name:"_swiper",required:!1,type:{name:"((swiper: Swiper) => void)"}},_freeModeNoMomentumRelease:{defaultValue:null,description:"!INTERNAL: Event will be fired on free mode touch end (release) and there will no be momentum",name:"_freeModeNoMomentumRelease",required:!1,type:{name:"((swiper: Swiper) => void)"}},onActiveIndexChange:{defaultValue:null,description:"Event will fired on active index change",name:"onActiveIndexChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSnapIndexChange:{defaultValue:null,description:"Event will fired on snap index change",name:"onSnapIndexChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onRealIndexChange:{defaultValue:null,description:"Event will fired on real index change",name:"onRealIndexChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onAfterInit:{defaultValue:null,description:"Event will fired right after initialization",name:"onAfterInit",required:!1,type:{name:"((swiper: Swiper) => void)"}},onBeforeInit:{defaultValue:null,description:"Event will fired right before initialization",name:"onBeforeInit",required:!1,type:{name:"((swiper: Swiper) => void)"}},onBeforeResize:{defaultValue:null,description:"Event will fired before resize handler",name:"onBeforeResize",required:!1,type:{name:"((swiper: Swiper) => void)"}},onBeforeSlideChangeStart:{defaultValue:null,description:"Event will fired before slide change transition start",name:"onBeforeSlideChangeStart",required:!1,type:{name:"((swiper: Swiper) => void)"}},onBeforeTransitionStart:{defaultValue:null,description:"Event will fired before transition start",name:"onBeforeTransitionStart",required:!1,type:{name:"((swiper: Swiper, speed: number, internal: any) => void)"}},onChangeDirection:{defaultValue:null,description:"Event will fired on direction change",name:"onChangeDirection",required:!1,type:{name:"((swiper: Swiper) => void)"}},onDoubleClick:{defaultValue:null,description:"Event will be fired when user double click/tap on Swiper",name:"onDoubleClick",required:!1,type:{name:"((swiper: Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void)"}},onDestroy:{defaultValue:null,description:"Event will be fired on swiper destroy",name:"onDestroy",required:!1,type:{name:"((swiper: Swiper) => void)"}},onMomentumBounce:{defaultValue:null,description:"Event will be fired on momentum bounce",name:"onMomentumBounce",required:!1,type:{name:"((swiper: Swiper) => void)"}},onOrientationchange:{defaultValue:null,description:"Event will be fired on orientation change (e.g. landscape -> portrait)",name:"onOrientationchange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlideResetTransitionStart:{defaultValue:null,description:"Event will be fired in the beginning of animation of resetting slide to current one",name:"onSlideResetTransitionStart",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlideResetTransitionEnd:{defaultValue:null,description:"Event will be fired in the end of animation of resetting slide to current one",name:"onSlideResetTransitionEnd",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSliderFirstMove:{defaultValue:null,description:"Event will be fired with first touch/drag move",name:"onSliderFirstMove",required:!1,type:{name:"((swiper: Swiper, event: TouchEvent) => void)"}},onSlidesLengthChange:{defaultValue:null,description:"Event will be fired when number of slides has changed",name:"onSlidesLengthChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSlidesGridLengthChange:{defaultValue:null,description:"Event will be fired when slides grid has changed",name:"onSlidesGridLengthChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onSnapGridLengthChange:{defaultValue:null,description:"Event will be fired when snap grid has changed",name:"onSnapGridLengthChange",required:!1,type:{name:"((swiper: Swiper) => void)"}},onUpdate:{defaultValue:null,description:"Event will be fired after swiper.update() call",name:"onUpdate",required:!1,type:{name:"((swiper: Swiper) => void)"}},onLock:{defaultValue:null,description:"Event will be fired when swiper is locked (when `watchOverflow` enabled)",name:"onLock",required:!1,type:{name:"((swiper: Swiper) => void)"}},onUnlock:{defaultValue:null,description:"Event will be fired when swiper is unlocked (when `watchOverflow` enabled)",name:"onUnlock",required:!1,type:{name:"((swiper: Swiper) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/common/slider/Slider.tsx#Slider"]={docgenInfo:Slider.__docgenInfo,name:"Slider",path:"src/components/common/slider/Slider.tsx#Slider"})}catch(__react_docgen_typescript_loader_error){}var _Default$parameters,_Default$parameters2,Slider_stories_jsx=react.createElement;function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){(0,defineProperty.Z)(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}const Slider_stories={title:"UI/Slider",component:slider_Slider,tags:["autodocs"]};var Default={render:function render(args){return Slider_stories_jsx(slider_Slider,args,Slider_stories_jsx(swiper_react.o5,null,"Slide 1"),Slider_stories_jsx(swiper_react.o5,null,"Slide 2"),Slider_stories_jsx(swiper_react.o5,null,"Slide 3"),Slider_stories_jsx(swiper_react.o5,null,"Slide 4"))},args:{spaceBetween:50,slidesPerView:3}};Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs),{},{source:_objectSpread({originalSource:"{\n  render: args => <Slider {...args}>\n      <SwiperSlide>Slide 1</SwiperSlide>\n      <SwiperSlide>Slide 2</SwiperSlide>\n      <SwiperSlide>Slide 3</SwiperSlide>\n      <SwiperSlide>Slide 4</SwiperSlide>\n    </Slider>,\n  args: {\n    spaceBetween: 50,\n    slidesPerView: 3\n  }\n}"},null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2=_Default$parameters2.docs)||void 0===_Default$parameters2?void 0:_Default$parameters2.source)})})}}]);