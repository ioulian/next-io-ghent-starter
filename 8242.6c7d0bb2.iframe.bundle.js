"use strict";(self.webpackChunknext_io_ghent_starter=self.webpackChunknext_io_ghent_starter||[]).push([[8242],{"./node_modules/colorjs.io/src/adapt.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{ZP:()=>adapt,db:()=>getWhite,mh:()=>WHITES});var _hooks_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/colorjs.io/src/hooks.js"),_util_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/colorjs.io/src/multiply-matrices.js");const WHITES={D50:[.3457/.3585,1,.2958/.3585],D65:[.3127/.329,1,.3583/.329]};function getWhite(name){return Array.isArray(name)?name:WHITES[name]}function adapt(W1,W2,XYZ,options={}){if(W1=getWhite(W1),W2=getWhite(W2),!W1||!W2)throw new TypeError(`Missing white point to convert ${W1?"":"from"}${W1||W2?"":"/"}${W2?"":"to"}`);if(W1===W2)return XYZ;let env={W1,W2,XYZ,options};if(_hooks_js__WEBPACK_IMPORTED_MODULE_0__.Z.run("chromatic-adaptation-start",env),env.M||(env.W1===WHITES.D65&&env.W2===WHITES.D50?env.M=[[1.0479298208405488,.022946793341019088,-.05019222954313557],[.029627815688159344,.990434484573249,-.01707382502938514],[-.009243058152591178,.015055144896577895,.7518742899580008]]:env.W1===WHITES.D50&&env.W2===WHITES.D65&&(env.M=[[.9554734527042182,-.023098536874261423,.0632593086610217],[-.028369706963208136,1.0099954580058226,.021041398966943008],[.012314001688319899,-.020507696433477912,1.3303659366080753]])),_hooks_js__WEBPACK_IMPORTED_MODULE_0__.Z.run("chromatic-adaptation-end",env),env.M)return(0,_util_js__WEBPACK_IMPORTED_MODULE_1__.Z)(env.M,env.XYZ);throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.")}},"./node_modules/colorjs.io/src/hooks.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=new class Hooks{add(name,callback,first){if("string"==typeof arguments[0])(Array.isArray(name)?name:[name]).forEach((function(name){this[name]=this[name]||[],callback&&this[name][first?"unshift":"push"](callback)}),this);else for(var name in arguments[0])this.add(name,arguments[0][name],arguments[1])}run(name,env){this[name]=this[name]||[],this[name].forEach((function(callback){callback.call(env&&env.context?env.context:env,env)}))}}},"./node_modules/colorjs.io/src/multiply-matrices.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function multiplyMatrices(A,B){let m=A.length;Array.isArray(A[0])||(A=[A]),Array.isArray(B[0])||(B=B.map((x=>[x])));let p=B[0].length,B_cols=B[0].map(((_,i)=>B.map((x=>x[i])))),product=A.map((row=>B_cols.map((col=>{let ret=0;if(!Array.isArray(row)){for(let c of col)ret+=row*c;return ret}for(let i=0;i<row.length;i++)ret+=row[i]*(col[i]||0);return ret}))));return 1===m&&(product=product[0]),1===p?product.map((x=>x[0])):product}__webpack_require__.d(__webpack_exports__,{Z:()=>multiplyMatrices})},"./node_modules/colorjs.io/src/parse.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>parse});var _util_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/colorjs.io/src/util.js"),_hooks_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/colorjs.io/src/hooks.js"),_space_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/colorjs.io/src/space.js");function parse(str,{meta}={}){let env={str:String(str)?.trim()};if(_hooks_js__WEBPACK_IMPORTED_MODULE_0__.Z.run("parse-start",env),env.color)return env.color;if(env.parsed=_util_js__WEBPACK_IMPORTED_MODULE_1__.dL(env.str),env.parsed){let name=env.parsed.name;if("color"===name){let id=env.parsed.args.shift(),alpha=env.parsed.rawArgs.indexOf("/")>0?env.parsed.args.pop():1;for(let space of _space_js__WEBPACK_IMPORTED_MODULE_2__.Z.all){let colorSpec=space.getFormat("color");if(colorSpec&&(id===colorSpec.id||colorSpec.ids?.includes(id))){const coords=Object.keys(space.coords).map(((_,i)=>env.parsed.args[i]||0));return meta&&(meta.formatId="color"),{spaceId:space.id,coords,alpha}}}let didYouMean="";if(id in _space_js__WEBPACK_IMPORTED_MODULE_2__.Z.registry){let cssId=_space_js__WEBPACK_IMPORTED_MODULE_2__.Z.registry[id].formats?.functions?.color?.id;cssId&&(didYouMean=`Did you mean color(${cssId})?`)}throw new TypeError(`Cannot parse color(${id}). `+(didYouMean||"Missing a plugin?"))}for(let space of _space_js__WEBPACK_IMPORTED_MODULE_2__.Z.all){let format=space.getFormat(name);if(format&&"function"===format.type){let alpha=1;(format.lastAlpha||_util_js__WEBPACK_IMPORTED_MODULE_1__.Z$(env.parsed.args).alpha)&&(alpha=env.parsed.args.pop());let types,coords=env.parsed.args;return format.coordGrammar&&(types=Object.entries(space.coords).map((([id,coordMeta],i)=>{let coordGrammar=format.coordGrammar[i],providedType=coords[i]?.type,type=coordGrammar.find((c=>c==providedType));if(!type){let coordName=coordMeta.name||id;throw new TypeError(`${providedType} not allowed for ${coordName} in ${name}()`)}let fromRange=type.range;"<percentage>"===providedType&&(fromRange||=[0,1]);let toRange=coordMeta.range||coordMeta.refRange;return fromRange&&toRange&&(coords[i]=_util_js__WEBPACK_IMPORTED_MODULE_1__.KK(fromRange,toRange,coords[i])),type}))),meta&&Object.assign(meta,{formatId:format.name,types}),{spaceId:space.id,coords,alpha}}}}else for(let space of _space_js__WEBPACK_IMPORTED_MODULE_2__.Z.all)for(let formatId in space.formats){let format=space.formats[formatId];if("custom"!==format.type)continue;if(format.test&&!format.test(env.str))continue;let color=format.parse(env.str);if(color)return color.alpha??=1,meta&&(meta.formatId=formatId),color}throw new TypeError(`Could not parse ${str} as a color. Missing a plugin?`)}},"./node_modules/colorjs.io/src/space.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>ColorSpace});var _util_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/colorjs.io/src/util.js"),_adapt_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/colorjs.io/src/adapt.js"),_hooks_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/colorjs.io/src/hooks.js");class ColorSpace{constructor(options){this.id=options.id,this.name=options.name,this.base=options.base?ColorSpace.get(options.base):null,this.aliases=options.aliases,this.base&&(this.fromBase=options.fromBase,this.toBase=options.toBase);let coords=options.coords??this.base.coords;for(let name in coords)"name"in coords[name]||(coords[name].name=name);this.coords=coords;let white=options.white??this.base.white??"D65";this.white=(0,_adapt_js__WEBPACK_IMPORTED_MODULE_0__.db)(white),this.formats=options.formats??{};for(let name in this.formats){let format=this.formats[name];format.type||="function",format.name||=name}options.cssId&&!this.formats.functions?.color?(this.formats.color={id:options.cssId},Object.defineProperty(this,"cssId",{value:options.cssId})):this.formats?.color&&!this.formats?.color.id&&(this.formats.color.id=this.id),this.referred=options.referred,Object.defineProperty(this,"path",{value:getPath(this).reverse(),writable:!1,enumerable:!0,configurable:!0}),_hooks_js__WEBPACK_IMPORTED_MODULE_1__.Z.run("colorspace-init-end",this)}inGamut(coords,{epsilon=75e-6}={}){if(this.isPolar)return coords=this.toBase(coords),this.base.inGamut(coords,{epsilon});let coordMeta=Object.values(this.coords);return coords.every(((c,i)=>{let meta=coordMeta[i];if("angle"!==meta.type&&meta.range){if(Number.isNaN(c))return!0;let[min,max]=meta.range;return(void 0===min||c>=min-epsilon)&&(void 0===max||c<=max+epsilon)}return!0}))}get cssId(){return this.formats.functions?.color?.id||this.id}get isPolar(){for(let id in this.coords)if("angle"===this.coords[id].type)return!0;return!1}getFormat(format){if("object"==typeof format)return format=processFormat(format,this);let ret;return ret="default"===format?Object.values(this.formats)[0]:this.formats[format],ret?(ret=processFormat(ret,this),ret):null}equals(space){return!!space&&(this===space||this.id===space.id)}to(space,coords){if(1===arguments.length&&([space,coords]=[space.space,space.coords]),space=ColorSpace.get(space),this.equals(space))return coords;coords=coords.map((c=>Number.isNaN(c)?0:c));let connectionSpace,connectionSpaceIndex,myPath=this.path,otherPath=space.path;for(let i=0;i<myPath.length&&myPath[i].equals(otherPath[i]);i++)connectionSpace=myPath[i],connectionSpaceIndex=i;if(!connectionSpace)throw new Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);for(let i=myPath.length-1;i>connectionSpaceIndex;i--)coords=myPath[i].toBase(coords);for(let i=connectionSpaceIndex+1;i<otherPath.length;i++)coords=otherPath[i].fromBase(coords);return coords}from(space,coords){return 1===arguments.length&&([space,coords]=[space.space,space.coords]),(space=ColorSpace.get(space)).to(this,coords)}toString(){return`${this.name} (${this.id})`}getMinCoords(){let ret=[];for(let id in this.coords){let meta=this.coords[id],range=meta.range||meta.refRange;ret.push(range?.min??0)}return ret}static registry={};static get all(){return[...new Set(Object.values(ColorSpace.registry))]}static register(id,space){if(1===arguments.length&&(id=(space=arguments[0]).id),space=this.get(space),this.registry[id]&&this.registry[id]!==space)throw new Error(`Duplicate color space registration: '${id}'`);if(this.registry[id]=space,1===arguments.length&&space.aliases)for(let alias of space.aliases)this.register(alias,space);return space}static get(space,...alternatives){if(!space||space instanceof ColorSpace)return space;if("string"===(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.dt)(space)){let ret=ColorSpace.registry[space.toLowerCase()];if(!ret)throw new TypeError(`No color space found with id = "${space}"`);return ret}if(alternatives.length)return ColorSpace.get(...alternatives);throw new TypeError(`${space} is not a valid color space`)}static resolveCoord(ref,workingSpace){let space,coord,coordType=(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.dt)(ref);if("string"===coordType?ref.includes(".")?[space,coord]=ref.split("."):[space,coord]=[,ref]:Array.isArray(ref)?[space,coord]=ref:(space=ref.space,coord=ref.coordId),space=ColorSpace.get(space),space||(space=workingSpace),!space)throw new TypeError(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);if(coordType=(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.dt)(coord),"number"===coordType||"string"===coordType&&coord>=0){let meta=Object.entries(space.coords)[coord];if(meta)return{space,id:meta[0],index:coord,...meta[1]}}space=ColorSpace.get(space);let normalizedCoord=coord.toLowerCase(),i=0;for(let id in space.coords){let meta=space.coords[id];if(id.toLowerCase()===normalizedCoord||meta.name?.toLowerCase()===normalizedCoord)return{space,id,index:i,...meta};i++}throw new TypeError(`No "${coord}" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(", ")}`)}static DEFAULT_FORMAT={type:"functions",name:"color"}}function getPath(space){let ret=[space];for(let s=space;s=s.base;)ret.push(s);return ret}function processFormat(format,{coords}={}){if(format.coords&&!format.coordGrammar){format.type||="function",format.name||="color",format.coordGrammar=(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.T7)(format.coords);let coordFormats=Object.entries(coords).map((([id,coordMeta],i)=>{let outputType=format.coordGrammar[i][0],fromRange=coordMeta.range||coordMeta.refRange,toRange=outputType.range,suffix="";return"<percentage>"==outputType?(toRange=[0,100],suffix="%"):"<angle>"==outputType&&(suffix="deg"),{fromRange,toRange,suffix}}));format.serializeCoords=(coords,precision)=>coords.map(((c,i)=>{let{fromRange,toRange,suffix}=coordFormats[i];return fromRange&&toRange&&(c=(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.KK)(fromRange,toRange,c)),c=(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.Zd)(c,precision),suffix&&(c+=suffix),c}))}return format}},"./node_modules/colorjs.io/src/spaces/srgb.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>srgb});var space=__webpack_require__("./node_modules/colorjs.io/src/space.js"),multiply_matrices=__webpack_require__("./node_modules/colorjs.io/src/multiply-matrices.js"),adapt=__webpack_require__("./node_modules/colorjs.io/src/adapt.js"),xyz_d65=__webpack_require__("./node_modules/colorjs.io/src/spaces/xyz-d65.js");class RGBColorSpace extends space.Z{constructor(options){options.coords||(options.coords={r:{range:[0,1],name:"Red"},g:{range:[0,1],name:"Green"},b:{range:[0,1],name:"Blue"}}),options.base||(options.base=xyz_d65.Z),options.toXYZ_M&&options.fromXYZ_M&&(options.toBase??=rgb=>{let xyz=(0,multiply_matrices.Z)(options.toXYZ_M,rgb);return this.white!==this.base.white&&(xyz=(0,adapt.ZP)(this.white,this.base.white,xyz)),xyz},options.fromBase??=xyz=>(xyz=(0,adapt.ZP)(this.base.white,this.white,xyz),(0,multiply_matrices.Z)(options.fromXYZ_M,xyz))),options.referred??="display",super(options)}}const srgb_linear=new RGBColorSpace({id:"srgb-linear",name:"Linear sRGB",white:"D65",toXYZ_M:[[.41239079926595934,.357584339383878,.1804807884018343],[.21263900587151027,.715168678767756,.07219231536073371],[.01933081871559182,.11919477979462598,.9505321522496607]],fromXYZ_M:[[3.2409699419045226,-1.537383177570094,-.4986107602930034],[-.9692436362808796,1.8759675015077202,.04155505740717559],[.05563007969699366,-.20397695888897652,1.0569715142428786]],formats:{color:{}}}),keywords={aliceblue:[240/255,248/255,1],antiquewhite:[250/255,235/255,215/255],aqua:[0,1,1],aquamarine:[127/255,1,212/255],azure:[240/255,1,1],beige:[245/255,245/255,220/255],bisque:[1,228/255,196/255],black:[0,0,0],blanchedalmond:[1,235/255,205/255],blue:[0,0,1],blueviolet:[138/255,43/255,226/255],brown:[165/255,42/255,42/255],burlywood:[222/255,184/255,135/255],cadetblue:[95/255,158/255,160/255],chartreuse:[127/255,1,0],chocolate:[210/255,105/255,30/255],coral:[1,127/255,80/255],cornflowerblue:[100/255,149/255,237/255],cornsilk:[1,248/255,220/255],crimson:[220/255,20/255,60/255],cyan:[0,1,1],darkblue:[0,0,139/255],darkcyan:[0,139/255,139/255],darkgoldenrod:[184/255,134/255,11/255],darkgray:[169/255,169/255,169/255],darkgreen:[0,100/255,0],darkgrey:[169/255,169/255,169/255],darkkhaki:[189/255,183/255,107/255],darkmagenta:[139/255,0,139/255],darkolivegreen:[85/255,107/255,47/255],darkorange:[1,140/255,0],darkorchid:[.6,50/255,.8],darkred:[139/255,0,0],darksalmon:[233/255,150/255,122/255],darkseagreen:[143/255,188/255,143/255],darkslateblue:[72/255,61/255,139/255],darkslategray:[47/255,79/255,79/255],darkslategrey:[47/255,79/255,79/255],darkturquoise:[0,206/255,209/255],darkviolet:[148/255,0,211/255],deeppink:[1,20/255,147/255],deepskyblue:[0,191/255,1],dimgray:[105/255,105/255,105/255],dimgrey:[105/255,105/255,105/255],dodgerblue:[30/255,144/255,1],firebrick:[178/255,34/255,34/255],floralwhite:[1,250/255,240/255],forestgreen:[34/255,139/255,34/255],fuchsia:[1,0,1],gainsboro:[220/255,220/255,220/255],ghostwhite:[248/255,248/255,1],gold:[1,215/255,0],goldenrod:[218/255,165/255,32/255],gray:[128/255,128/255,128/255],green:[0,128/255,0],greenyellow:[173/255,1,47/255],grey:[128/255,128/255,128/255],honeydew:[240/255,1,240/255],hotpink:[1,105/255,180/255],indianred:[205/255,92/255,92/255],indigo:[75/255,0,130/255],ivory:[1,1,240/255],khaki:[240/255,230/255,140/255],lavender:[230/255,230/255,250/255],lavenderblush:[1,240/255,245/255],lawngreen:[124/255,252/255,0],lemonchiffon:[1,250/255,205/255],lightblue:[173/255,216/255,230/255],lightcoral:[240/255,128/255,128/255],lightcyan:[224/255,1,1],lightgoldenrodyellow:[250/255,250/255,210/255],lightgray:[211/255,211/255,211/255],lightgreen:[144/255,238/255,144/255],lightgrey:[211/255,211/255,211/255],lightpink:[1,182/255,193/255],lightsalmon:[1,160/255,122/255],lightseagreen:[32/255,178/255,170/255],lightskyblue:[135/255,206/255,250/255],lightslategray:[119/255,136/255,.6],lightslategrey:[119/255,136/255,.6],lightsteelblue:[176/255,196/255,222/255],lightyellow:[1,1,224/255],lime:[0,1,0],limegreen:[50/255,205/255,50/255],linen:[250/255,240/255,230/255],magenta:[1,0,1],maroon:[128/255,0,0],mediumaquamarine:[.4,205/255,170/255],mediumblue:[0,0,205/255],mediumorchid:[186/255,85/255,211/255],mediumpurple:[147/255,112/255,219/255],mediumseagreen:[60/255,179/255,113/255],mediumslateblue:[123/255,104/255,238/255],mediumspringgreen:[0,250/255,154/255],mediumturquoise:[72/255,209/255,.8],mediumvioletred:[199/255,21/255,133/255],midnightblue:[25/255,25/255,112/255],mintcream:[245/255,1,250/255],mistyrose:[1,228/255,225/255],moccasin:[1,228/255,181/255],navajowhite:[1,222/255,173/255],navy:[0,0,128/255],oldlace:[253/255,245/255,230/255],olive:[128/255,128/255,0],olivedrab:[107/255,142/255,35/255],orange:[1,165/255,0],orangered:[1,69/255,0],orchid:[218/255,112/255,214/255],palegoldenrod:[238/255,232/255,170/255],palegreen:[152/255,251/255,152/255],paleturquoise:[175/255,238/255,238/255],palevioletred:[219/255,112/255,147/255],papayawhip:[1,239/255,213/255],peachpuff:[1,218/255,185/255],peru:[205/255,133/255,63/255],pink:[1,192/255,203/255],plum:[221/255,160/255,221/255],powderblue:[176/255,224/255,230/255],purple:[128/255,0,128/255],rebeccapurple:[.4,.2,.6],red:[1,0,0],rosybrown:[188/255,143/255,143/255],royalblue:[65/255,105/255,225/255],saddlebrown:[139/255,69/255,19/255],salmon:[250/255,128/255,114/255],sandybrown:[244/255,164/255,96/255],seagreen:[46/255,139/255,87/255],seashell:[1,245/255,238/255],sienna:[160/255,82/255,45/255],silver:[192/255,192/255,192/255],skyblue:[135/255,206/255,235/255],slateblue:[106/255,90/255,205/255],slategray:[112/255,128/255,144/255],slategrey:[112/255,128/255,144/255],snow:[1,250/255,250/255],springgreen:[0,1,127/255],steelblue:[70/255,130/255,180/255],tan:[210/255,180/255,140/255],teal:[0,128/255,128/255],thistle:[216/255,191/255,216/255],tomato:[1,99/255,71/255],turquoise:[64/255,224/255,208/255],violet:[238/255,130/255,238/255],wheat:[245/255,222/255,179/255],white:[1,1,1],whitesmoke:[245/255,245/255,245/255],yellow:[1,1,0],yellowgreen:[154/255,205/255,50/255]};let coordGrammar=Array(3).fill("<percentage> | <number>[0, 255]"),coordGrammarNumber=Array(3).fill("<number>[0, 255]");const srgb=new RGBColorSpace({id:"srgb",name:"sRGB",base:srgb_linear,fromBase:rgb=>rgb.map((val=>{let sign=val<0?-1:1,abs=val*sign;return abs>.0031308?sign*(1.055*abs**(1/2.4)-.055):12.92*val})),toBase:rgb=>rgb.map((val=>{let sign=val<0?-1:1,abs=val*sign;return abs<.04045?val/12.92:sign*((abs+.055)/1.055)**2.4})),formats:{rgb:{coords:coordGrammar},rgb_number:{name:"rgb",commas:!0,coords:coordGrammarNumber,noAlpha:!0},color:{},rgba:{coords:coordGrammar,commas:!0,lastAlpha:!0},rgba_number:{name:"rgba",commas:!0,coords:coordGrammarNumber},hex:{type:"custom",toGamut:!0,test:str=>/^#([a-f0-9]{3,4}){1,2}$/i.test(str),parse(str){str.length<=5&&(str=str.replace(/[a-f0-9]/gi,"$&$&"));let rgba=[];return str.replace(/[a-f0-9]{2}/gi,(component=>{rgba.push(parseInt(component,16)/255)})),{spaceId:"srgb",coords:rgba.slice(0,3),alpha:rgba.slice(3)[0]}},serialize:(coords,alpha,{collapse=!0}={})=>{alpha<1&&coords.push(alpha),coords=coords.map((c=>Math.round(255*c)));let collapsible=collapse&&coords.every((c=>c%17==0));return"#"+coords.map((c=>collapsible?(c/17).toString(16):c.toString(16).padStart(2,"0"))).join("")}},keyword:{type:"custom",test:str=>/^[a-z]+$/i.test(str),parse(str){let ret={spaceId:"srgb",coords:null,alpha:1};if("transparent"===(str=str.toLowerCase())?(ret.coords=keywords.black,ret.alpha=0):ret.coords=keywords[str],ret.coords)return ret}}}})},"./node_modules/colorjs.io/src/spaces/xyz-d65.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=new(__webpack_require__("./node_modules/colorjs.io/src/space.js").Z)({id:"xyz-d65",name:"XYZ D65",coords:{x:{name:"X"},y:{name:"Y"},z:{name:"Z"}},white:"D65",formats:{color:{ids:["xyz-d65","xyz"]}},aliases:["xyz"]})},"./node_modules/colorjs.io/src/util.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function isString(str){return"string"===type(str)}function type(o){return(Object.prototype.toString.call(o).match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase()}function toPrecision(n,precision){n=+n,precision=+precision;let integerLength=(Math.floor(n)+"").length;if(precision>integerLength)return+n.toFixed(precision-integerLength);{let p10=10**(integerLength-precision);return Math.round(n/p10)*p10}}function parseFunction(str){if(!str)return;str=str.trim();const isNumberRegex=/^-?[\d.]+$/;let parts=str.match(/^([a-z]+)\((.+?)\)$/i);if(parts){let args=[];return parts[2].replace(/\/?\s*([-\w.]+(?:%|deg)?)/g,(($0,arg)=>{/%$/.test(arg)?(arg=new Number(arg.slice(0,-1)/100)).type="<percentage>":/deg$/.test(arg)?((arg=new Number(+arg.slice(0,-3))).type="<angle>",arg.unit="deg"):isNumberRegex.test(arg)&&((arg=new Number(arg)).type="<number>"),$0.startsWith("/")&&((arg=arg instanceof Number?arg:new Number(arg)).alpha=!0),args.push(arg)})),{name:parts[1].toLowerCase(),rawName:parts[1],rawArgs:parts[2],args}}}function last(arr){return arr[arr.length-1]}function interpolate(start,end,p){return isNaN(start)?end:isNaN(end)?start:start+(end-start)*p}function mapRange(from,to,value){return interpolate(to[0],to[1],function interpolateInv(start,end,value){return(value-start)/(end-start)}(from[0],from[1],value))}function parseCoordGrammar(coordGrammars){return coordGrammars.map((coordGrammar=>coordGrammar.split("|").map((type=>{let range=(type=type.trim()).match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);if(range){let ret=new String(range[1]);return ret.range=[+range[2],+range[3]],ret}return type}))))}__webpack_require__.d(__webpack_exports__,{HD:()=>isString,KK:()=>mapRange,T7:()=>parseCoordGrammar,Z$:()=>last,Zd:()=>toPrecision,dL:()=>parseFunction,dt:()=>type,sX:()=>interpolate})},"./node_modules/easing-coordinates/dist/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BE:()=>easingCoordinates});const roundToMaxTenDecimals=num=>+num.toFixed(10),getCoordinate=(x,y)=>({x:roundToMaxTenDecimals(x),y:roundToMaxTenDecimals(y)}),getFunctionArguments=functionAsString=>{return(str=functionAsString,str.slice(str.indexOf("(")+1,str.lastIndexOf(")")).split(",").map((item=>item.trim())).filter((item=>""!==item))).map((arg=>(str=>Number.isNaN(Number(str))?str:Number(str))(arg)));var str};function getBezier(t,n1,n2){return(1-t)*(1-t)*(1-t)*0+(1-t)*(1-t)*3*t*n1+3*(1-t)*(t*t)*n2+t*t*t*1}const easeMap={ease:"cubic-bezier(0.25, 0.1, 0.25, 1)","ease-in":"cubic-bezier(0.42, 0, 1, 1)","ease-in-out":"cubic-bezier(0.42, 0, 0.58, 1)","ease-out":"cubic-bezier(0, 0, 0.58, 1)"};function easingCoordinates(easingFunction,polySteps){const errorMsgStart=`Error parsing "${easingFunction}".`;if(easeMap[easingFunction]&&(easingFunction=easeMap[easingFunction]),easingFunction.includes("steps(")){const args=getFunctionArguments(easingFunction),[stepCount,stepSkip]=args;if(args.length<1||args.length>2)throw new Error(`${errorMsgStart} Got ${args.length} arguments but expected 1 or 2.`);if("number"!=typeof args[0])throw new Error(`${errorMsgStart} "${args[0]}" is not a number.`);if(2===args.length&&"string"!=typeof args[1])throw new Error(`${errorMsgStart} "${args[1]}" is not a string.`);return function stepsCoordinates(steps,skip="skip-end"){const coordinates=[];let n=0;for(;n<steps;){const x1=n/steps,x2=(n+1)/steps;let y;if("skip-none"===skip)y=n/(steps-1);else if("skip-both"===skip)y=(n+1)/(steps+1);else if("skip-start"===skip||"start"===skip)y=(n+1)/steps;else{if("skip-end"!==skip&&"end"!==skip)throw new Error(`Error can't recognise step skip "${skip}"`);y=n/steps}coordinates.push(getCoordinate(x1,y)),coordinates.push(getCoordinate(x2,y)),++n}return coordinates}(stepCount,stepSkip)}if(easingFunction.includes("cubic-bezier(")){const args=getFunctionArguments(easingFunction),[x1,y1,x2,y2]=args;if(4!==args.length)throw new Error(`${errorMsgStart} Got ${args.length} arguments but expected 4.`);return args.forEach((arg=>{if("number"!=typeof arg)throw new Error(`${errorMsgStart} "${arg}" is not a number.`)})),function cubicCoordinates(x1,y1,x2,y2,polySteps=10){const increment=1/polySteps;let coordinates=[];for(let i=0;i<=1;i+=increment)coordinates.push({x:getBezier(i,x1,x2),y:getBezier(i,y1,y2)});return coordinates.map((obj=>getCoordinate(obj.x,obj.y)))}(x1,y1,x2,y2,polySteps)}throw new Error(`${errorMsgStart} If not a typo then please create a GitHub issue :)`)}}}]);